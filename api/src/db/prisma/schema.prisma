datasource db {
  provider   = "postgres"
  url        = env("DATABASE_URI")
  extensions = [citext, pgcrypto]
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
  // https://github.com/prisma/prisma/issues/13672
  // output   = ".prisma-client-js"
}

// Keep in sync with @uni-esports/interfaces
enum Role {
  ADMIN
  USER
  MODERATOR
}

enum LinkedIdentities {
  steam64
  discord
}

enum Day {
  mon
  tue
  wed
  thu
  fri
  sat
  sun
}

model User {
  id                 String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email              String   @unique
  passwordHash       String?  @map("password_hash")
  passwordResetToken String?  @unique @map("password_hash_token")
  verified           Boolean  @default(false)
  username           String   @unique @db.Citext
  createdAt          DateTime @default(now()) @map("created_at") @db.Timestamptz()
  roles              Role[]
  universityId       Int?     @map("university_id")
  steam64Id          String?  @unique @map("steam_64_id")
  discordId          String?  @unique @map("discord_id")

  university University?  @relation(fields: [universityId], references: [id])
  teams      UserOnTeam[]

  @@map("user")
}

model University {
  id   Int    @id @default(autoincrement())
  name String @unique @db.Citext
  User User[]

  domains UniversityDomain[]
  teams   Team[]

  @@map("university")
}

model UniversityDomain {
  domain       String @unique
  universityId Int    @map("university_id")

  university University @relation(fields: [universityId], references: [id])

  @@id([domain, universityId])
  @@map("university_domain")
}

model Team {
  id           Int      @id @default(autoincrement())
  name         String   @db.Citext
  universityId Int      @map("university_id")
  inviteCode   String?  @unique @map("invite_code")
  active       Boolean  @default(true)
  createdAt    DateTime @default(now()) @map("created_at") @db.Timestamptz()

  university      University         @relation(fields: [universityId], references: [id])
  users           UserOnTeam[]
  tournaments     TeamOnTournament[]
  matches         TeamOnMatch[]
  requestedScrims Scrim[]            @relation("requestingTeam")
  acceptedScrims  Scrim[]            @relation("acceptingTeam")

  @@unique([universityId, name])
  @@map("team")
}

model UserOnTeam {
  user      User     @relation(fields: [userId], references: [id])
  team      Team     @relation(fields: [teamId], references: [id])
  captain   Boolean  @default(false)
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz()

  userId String @map("user_id") @db.Uuid
  teamId Int    @map("team_id")

  @@id([userId, teamId])
  @@map("team_user")
}

enum TournamentStatus {
  ANNOUNCED
  REGISTERATION
  ONGOING
  COMPLETED
}

model Tournament {
  id             Int      @id @default(autoincrement())
  gameId         String   @map("game_id")
  matchStartTime DateTime @map("match_start_time") @db.Timestamptz()
  matchDay       Day      @map("match_day")

  game  Game               @relation(fields: [gameId], references: [id])
  state TournamentStatus
  teams TeamOnTournament[]

  @@map("tournament")
}

model TeamOnTournament {
  team         Team       @relation(fields: [teamId], references: [id])
  tournament   Tournament @relation(fields: [tournamentId], references: [id])
  teamId       Int        @map("team_id")
  tournamentId Int        @map("tournament_id")
  createdAt    DateTime   @default(now()) @map("created_at") @db.Timestamptz()

  @@id([teamId, tournamentId])
  @@map("tournament_team")
}

model Game {
  id             String             @id @unique
  displayName    String             @map("display_name")
  teamsPerMatch  Int                @map("teams_per_match")
  playersPerTeam Int                @map("players_per_team")
  hasVeto        Boolean            @map("has_veto")
  requiredIds    LinkedIdentities[] @map("required_ids")

  tournaments Tournament[]
  match       Match[]
  scrim       Scrim[]

  @@map("game")
}

enum MatchStatus {
  Scheduled
  Setup
  Ongoing
  Completed
  Cancelled
}

model Match {
  id String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid

  gameId    String      @map("game_id")
  status    MatchStatus
  startTime DateTime    @default(now()) @map("start_time") @db.Timestamptz()

  game Game @relation(fields: [gameId], references: [id])

  teams            TeamOnMatch[]
  matchDetailsCsgo MatchDetailsCsgo[] @ignore

  @@map("match")
}

model TeamOnMatch {
  id Int @unique @default(autoincrement())

  score Int @default(0)

  teamId     Int    @map("team_id")
  matchId    String @map("match_id") @db.Uuid
  teamNumber Int    @map("team_number")

  team  Team  @relation(fields: [teamId], references: [id])
  match Match @relation(fields: [matchId], references: [id])

  @@unique([teamId, matchId])
  @@map("match_team")
}

model MatchDetailsCsgo {
  id      Int    @unique @default(autoincrement())
  matchId String @unique @map("match_id") @db.Uuid

  map String?

  team1steamIds String[] @map("team_1_steam_ids")
  team2steamIds String[] @map("team_2_steam_ids")

  serverConnect        String? @map("server_connect")
  serverId             String? @map("server_id")
  steamGameServerToken String? @map("steam_game_server_token")
  steamGameServerId    String? @map("steam_game_server_id")

  match Match @relation(fields: [matchId], references: [id])

  @@map("match_details_csgo")
}

model Scrim {
  id             Int      @unique @default(autoincrement())
  gameId         String   @map("game_id")
  matchStart     DateTime @map("match_start") @db.Timestamptz()
  acceptDeadline DateTime @map("deadline") @db.Timestamptz()

  requestingTeamId Int  @map("requesting_team_id")
  acceptingTeamId  Int? @map("accepting_team_id")

  game           Game  @relation(fields: [gameId], references: [id])
  requestingTeam Team  @relation("requestingTeam", fields: [requestingTeamId], references: [id])
  acceptingTeam  Team? @relation("acceptingTeam", fields: [acceptingTeamId], references: [id])

  @@map("scrim")
}
