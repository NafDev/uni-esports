datasource db {
  provider   = "postgres"
  url        = env("DATABASE_URI")
  extensions = [citext]
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
  // https://github.com/prisma/prisma/issues/13672
  // output   = ".prisma-client-js"
}

// Keep in sync with @uni-esports/interfaces
enum Role {
  ADMIN
  USER
  MODERATOR
}

// Must be indentical to user attribute names
enum LinkedIdentities {
  steam64Id
  discordId
}

enum Day {
  mon
  tue
  wed
  thu
  fri
  sat
  sun
}

model User {
  id                 String   @id @default(uuid()) @db.Uuid
  email              String   @unique
  passwordHash       String?
  passwordResetToken String?  @unique
  verified           Boolean  @default(false)
  username           String   @unique @db.Citext
  createdAt          DateTime @default(now()) @db.Timestamptz()
  roles              Role[]
  universityId       Int?
  steam64Id          String?  @unique
  discordId          String?  @unique

  university University?  @relation(fields: [universityId], references: [id])
  teams      UserOnTeam[]

  @@map("user")
}

model University {
  id   Int    @id @default(autoincrement())
  name String @unique @db.Citext
  User User[]

  domains UniversityDomain[]
  teams   Team[]

  @@map("university")
}

model UniversityDomain {
  domain       String @unique
  universityId Int

  university University @relation(fields: [universityId], references: [id])

  @@id([domain, universityId])
  @@map("universityDomain")
}

model Team {
  id           Int      @id @default(autoincrement())
  name         String   @db.Citext
  universityId Int
  inviteCode   String?  @unique
  active       Boolean  @default(true)
  createdAt    DateTime @default(now()) @db.Timestamptz()

  university  University         @relation(fields: [universityId], references: [id])
  users       UserOnTeam[]
  tournaments TeamOnTournament[]
  matches     TeamOnMatch[]

  @@unique([universityId, name])
  @@map("team")
}

model UserOnTeam {
  user      User     @relation(fields: [userId], references: [id])
  team      Team     @relation(fields: [teamId], references: [id])
  captain   Boolean  @default(false)
  createdAt DateTime @default(now()) @db.Timestamptz()

  userId String @db.Uuid
  teamId Int

  @@id([userId, teamId])
  @@map("teamUser")
}

enum TournamentStatus {
  ANNOUNCED
  REGISTERATION
  ONGOING
  COMPLETED
}

model Tournament {
  id             Int      @id @default(autoincrement())
  gameId         String
  matchStartTime DateTime @db.Timestamptz()
  matchDay       Day

  game  Game               @relation(fields: [gameId], references: [id])
  state TournamentStatus
  teams TeamOnTournament[]

  @@map("tournament")
}

model TeamOnTournament {
  team         Team       @relation(fields: [teamId], references: [id])
  tournament   Tournament @relation(fields: [tournamentId], references: [id])
  teamId       Int
  tournamentId Int
  createdAt    DateTime   @default(now()) @db.Timestamptz()

  @@id([teamId, tournamentId])
  @@map("tournamentTeam")
}

model Game {
  id             String             @id @unique
  displayName    String
  teamsPerMatch  Int
  playersPerTeam Int
  requiredIds    LinkedIdentities[]

  tournaments Tournament[]
  match       Match[]

  @@map("game")
}

enum MatchStatus {
  Scheduled
  Ongoing
  Completed
}

model Match {
  id String @id @default(uuid()) @db.Uuid

  gameId    String
  status    MatchStatus
  startTime DateTime    @default(now()) @db.Timestamptz()

  game  Game          @relation(fields: [gameId], references: [id])
  teams TeamOnMatch[]

  @@map("match")
}

model TeamOnMatch {
  teamId  Int
  matchId String @db.Uuid

  team  Team  @relation(fields: [teamId], references: [id])
  match Match @relation(fields: [matchId], references: [id])

  @@id([teamId, matchId])
  @@map("matchTeam")
}
